---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: authentik
spec:
  interval: 30m
  chart:
    spec:
      chart: authentik
      version: 2023.10.7
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  #dependsOn:
  #  - name: cloudnative-pg
  #    namespace: database
  values:
    #initContainers:
    #  init-db:
    #    image:
    #      repository: ghcr.io/onedr0p/postgres-init
    #      tag: 15
    #      pullPolicy: IfNotPresent
    #    envFrom: &envFrom
    #      - secretRef:
    #          name: authentik-secrets
    initContainers:
      init-db:
        image: ghcr.io/onedr0p/postgres-init:16
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: authentik-secrets
    podAnnotations:
      secret.reloader.stakater.com/reload: authentik-secrets

    service:
      annotations:
        io.cilium/lb-ipam-ips: "${IPAM_AUTHENTIK_APP}"
        ingress.cilium.io/loadbalancer-mode: dedicated
        kubernetes.io/ingress.class: cilium

    ingress:
      enabled: true
      ingressClassName: external
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/icon: authentik.png
        gethomepage.dev/name: Authentik
        gethomepage.dev/group: Infrastructure
        gethomepage.dev/widget.type: authentik
        gethomepage.dev/widget.url: https://auth.${SECRET_DOMAIN}
        gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_AUTHENTIK_TOKEN}}"
        external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      hosts:
        - host: &host authentik.${SECRET_DOMAIN}
          paths:
            - path: /
              pathType: Prefix
        - host: &customHost auth.${SECRET_DOMAIN}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - *host
            - *customHost
          secretName: *host
    #envValueFrom:
    #    AUTHENTIK_POSTGRESQL__NAME:
    #      secretKeyRef:
    #        name: &pgsec authentik-secrets
    #        key: pg_dbname
    #    AUTHENTIK_POSTGRESQL__USER:
    #      secretKeyRef:
    #        name: *pgsec
    #        key: pg_user
    #    AUTHENTIK_POSTGRESQL__PASSWORD:
    #      secretKeyRef:
    #        name: *pgsec
    #        key: pg_password
    envFrom:
      - secretRef:
          name: authentik-secrets
    postgresql:
      enabled: false
    redis:
      enabled: false
    geoip:
      enabled: false
    prometheus:
      rules:
        create: true
      serviceMonitor:
        create: true
    authentik:
      email:
        from: "id@${SECRET_DOMAIN}"
        host: "mail1.home.ld"
        port: "25"
        use_ssl: false
      outposts:
        container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      error_reporting:
        enabled: false
        send_pii: false
    volumeMounts:
      - name: certs
        mountPath: "/certs"
        readOnly: true
    volumes:
      - name: certs
        secret:
          secretName: "${SECRET_DOMAIN/./-}-production-tls"
          items:
            - key: tls.crt
              path: "${SECRET_DOMAIN}.pem"
            - key: tls.key
              path: "${SECRET_DOMAIN}.key"
